#!/usr/bin/env python

from __future__ import with_statement
from optparse import OptionParser
from lxml import etree
import requests
from requests.utils import CaseInsensitiveDict
import os
import pprint
import time
import importlib
import sys
import traceback
from urllib import urlencode
from io import open
from urlparse import urlparse, urlunparse, parse_qsl, parse_qs

try:
    from pygments import highlight
    from pygments.lexers import get_lexer_by_name
    from pygments.formatters import TerminalFormatter, HtmlFormatter
except ImportError:
    _have_pygment = False
else:
    _have_pygment = True

try:
    from one_depends.stomp import Connection10 as Connection
except:
    _have_stomp = False
else:
    _have_stomp = True

BOLD = u"\033[1m"
DIM = u"\033[2m"
UNDERLINE = u"\033[4m"
BLINK = u"\033[5m"
NORMAL = u"\033[0;0m"
RED = u"\033[31m"
GREEN = u"\033[32m"
YELLOW = u"\033[33m"
BLUE = u"\033[34m"
DEFAULT = u"\033[39m"
WHITE = u"\033[37m"
BACK_BLUE = u"\033[44m"
BACK_DEFAULT = u"\033[49m"


# Options
parser = OptionParser(usage=u"restnote [options] file")
parser.add_option(
    u'-f', u'--format', dest=u'output_format', default=u'terminal',
    help=u'output format to use (terminal or none)')
parser.add_option(
    u'-s', u'--step', dest=u'step_through', action=u'store_true',
    help=u'step through script')
parser.add_option(
    u'-m', u'--html', dest=u'html',
    help=u'log to html file')
parser.add_option(
    u'-H', u'--hostname', dest=u'hostname',
    help=u'specify a hostname (available as env RESTHOST)')
parser.add_option(
    u'-u', u'--user', dest=u'user',
    help=u'specify a user string "DOMAIN+user:password" (available as env RESTUSER and RESTPASS)')

options, args = parser.parse_args()
input_filename = args.pop(0)
pp = pprint.PrettyPrinter(indent=2)


class Terminal(object):
    def __init__(self):
        self.mute = False
        self.smute = []
        self.graphical = False
        if _have_pygment:
            self.formatter = TerminalFormatter()
            self.lexer = get_lexer_by_name(u'xml')

    def log(self, desc, data=None, data_type=None):
        if (self.mute or data_type in self.smute) and data_type != u'error':
            return
        if data_type == u'comment':
            print BLUE + desc.strip() + NORMAL
            return
        if data_type == u'title':
            print BOLD + BLUE + desc.strip() + NORMAL
            return
        if data_type == u'table':
            lengths = [len(x) for x in desc]
            max_length = 40
            for row in data:
                lengths = [min(max_length, max(lengths[n], len(x))) for n, x in enumerate(row)]
            fs = u'  '.join([(u'%%-%is' % l) for l in lengths])
            print fs % desc
            for row in data:
                print fs % tuple([col[:max_length] for col in row])
            return
        if data_type == u'error':
            print BOLD + RED + desc + NORMAL
        elif data_type == u'ok':
            print BOLD + GREEN + desc + NORMAL
        elif desc is not None:
            print u"%s%s%s" % (BOLD, desc, NORMAL)
        if data is not None:
            if _have_pygment and data_type == u'xml':
                try:
                    data = etree.tostring(data)
                except AttributeError:
                    pass
                except TypeError:
                    pass
                try:
                    data = data.decode('utf8')
                except AttributeError:
                    data = unicode(data, 'utf8')
                except UnicodeDecodeError:
                    pass
                except UnicodeEncodeError:
                    pass
                print highlight(data, self.lexer, self.formatter)
            elif data_type == u'pp':
                if isinstance(data, CaseInsensitiveDict) or isinstance(data, dict):
                    if len(data) == 0:
                        print('{empty dict}')
                    else:
                        longest = max([len(k) for k in data.keys()])
                        for k, v in data.iteritems():
                            print((('  %%-%is   %%s' % longest) % (k, v)))
                        print('')
                elif isinstance(data, str):
                    print(data)
                else:
                    pp.pprint(data)
            else:
                print data

    def close(self):
        pass


class HTML(object):
    def __init__(self, filename):
        self.handle = open(filename, u'w')
        self.mute = False
        self.smute = []
        self.graphical = True
        if _have_pygment:
            self.formatter = HtmlFormatter()
            self.lexer = get_lexer_by_name(u'xml')
        self.handle.write(u"<html><head><style>\n")
        self.handle.write(self.formatter.get_style_defs())
        self.handle.write(u""".header { font-family: arial;
                  font-weight: bold }\n""")
        self.handle.write(u""".code { background-color: #fafafa;
                  border-left: 2px solid #aaa; padding: 5px; margin-top: 5px;
                  margin-bottom: 5px }\n""")
        self.handle.write(u""".comment { font-family: arial; font-weight:
                  normal; color: blue; margin-bottom: 20px;
                  font-style: italic; margin-top: 20px}\n""")
        self.handle.write(u""".title { font-family: arial; font-size: 24;
                  font-weight: bold; color: blue; margin-bottom: 20px;
                  margin-top: 20px}\n""")
        self.handle.write(u""".error { font-family: arial; font-size: 12;
                  font-weight: bold; color: red; margin-bottom: 20px;
                  margin-top: 20px}\n""")
        self.handle.write(u""".error { font-family: arial; font-size: 12;
                  font-weight: bold; color: green; margin-bottom: 20px;
                  margin-top: 20px}\n""")
        self.handle.write(u""" table { font-family: arial; font-size: 12;
                  font-weight: normal; margin-bottom: 20px;
                  margin-top: 20px}\n""")
        self.handle.write(u""" th { font-family: arial; font-size: 12;
                  font-weight: bold; text-align: left }\n""")
        self.handle.write(u""" td { border-top: 1px solid #ccc }\n""")
        self.handle.write(u"</style></head><body>\n")
        self.handle.flush()
        self.counter = 0

    def get_id(self):
        self.counter += 1
        return u"obj%i" % self.counter

    def log(self, desc, data=None, data_type=None):
        if (self.mute or data_type in self.smute) and data_type != u'error':
            return
        if data_type == u'comment':
            self.handle.write(u"<div class=\"comment\">%s</div>\n" % desc)
            self.handle.flush()
            return
        if data_type == u'title':
            self.handle.write(u"<div class=\"title\">%s</div>\n" % desc)
            self.handle.flush()
            return
        if data_type == u'table':
            self.handle.write(u"<table><tr>\n")
            for heading in desc:
                self.handle.write(u'<th>%s</th>\n' % heading)
            self.handle.write(u"</tr>\n")
            for row in data:
                self.handle.write(u"<tr>\n")
                for col in row:
                    self.handle.write(u'<td>%s</td>\n' % col)
                self.handle.write(u"</tr>\n")
            self.handle.write(u"</table>\n")
            self.handle.flush()
            return
        if data_type == u'error':
            self.handle.write(u"<div class=\"error\">%s</div>\n" % desc)
        elif data_type == u'ok':
            self.handle.write(u"<div class=\"ok\">%s</div>\n" % desc)
        elif desc is not None:
            self.handle.write(u"<div class=\"header\">%s</div>\n" % desc)
        if data is not None:
            self.handle.write(u"<div class=\"code\">\n")
            if _have_pygment and data_type == u'xml':
                try:
                    data = etree.tostring(data)
                except AttributeError:
                    pass
                except TypeError:
                    pass
                try:
                    data = data.decode()
                except AttributeError:
                    data = unicode(data)
                except UnicodeDecodeError:
                    pass
                except UnicodeEncodeError:
                    pass
                self.handle.write(highlight(unicode(data), self.lexer,
                                            self.formatter))
            elif data_type == u'pp':
                self.handle.write(u"<pre>\n")
                self.handle.write(pp.pformat(data))
                self.handle.write(u"</pre>\n")
            else:
                data = (unicode(data).replace(u'&', u'&amp;').replace(u'<', u'&lt;')
                        .replace(u'>', u'&gt'))
                self.handle.write(u"<pre>%s</pre>\n" % data)
            self.handle.write(u"</div>\n")
        self.handle.flush()

    def close(self):
        self.handle.write(u"</body></html>\n")
        self.handle.close()


class StompResponse:
    def __init__(self, headers, content, status_code):
        self.headers = headers
        self.content = bytes(content)
        self.status_code = status_code
        self.url = headers.get('location', None)


class StompListener(object):
    def __init__(self, logger, user, password, url, handler):
        self.handler = handler
        self.url = url
        self.logger = logger
        urldata = urlparse(url)
        hostname = urldata.hostname
        port = urldata.port
        q = parse_qs(urldata.query)
        destination = q.get('destination')[0]
        self.conn = Connection([(hostname, port)])
        self.conn.set_listener('', self)
        self.conn.start()
        self.conn.connect(user, password, wait=True)
        self.conn.subscribe(destination=destination, ack='auto')
        self.logger.log("Connected to STOMP", url)

    def __repr__(self):
        return '<Listener %s>' % self.url

    def on_error(self, headers, message):
        self.logger.log('Stomp error', StompResponse(headers, message, 500), 'error')
        
    def on_message(self, headers, message):
        response =  StompResponse(headers, message, 200)
        self.logger.log('Stomp message', response.content, 'xml')
        callback = self.handler.copy()
        callback.var.update({callback.args[0]: response})
        callback.run()

    def on_connecting(self, hap):
        self.logger.log('Stomp connection', '%s:%s' % (hap[0], str(hap[1])), 'info')

    def on_disconnected(self):
        self.logger.log('Stomp disconnected', None, 'error')

    def on_heartbeat_time_out(self):
        self.logger.log('Stomp heartbeat timeout', None, 'error')

    def close(self, url):
        conn = self.connections.get(url)
        if conn is not None:
            conn.stop()
            del self.connections[url]


basevar = {u'true': True, u'false': False, u'none': None,
    u'stomp available': _have_stomp, u'pygments available': _have_pygment}


class Environment(object):
    def __init__(self, logger):
        self.var = dict(basevar)
        self.attached = {}
        self.logger = logger
        self.namespaces = {}
        self.session = None
        self.terminate = False
        self.step_through = False
        self.position = 0
        self.is_sub = False

    def __repr__(self):
        if self.is_sub:
            return u'<Sub (%s) %s>' % (self.name, ', '.join(self.args))
        else:
            return u'<Environment %s>' % self.filename

    def log(self, *args):
        if self.logger is not None:
            self.logger.log(*args)

    @property
    def line_iterator(self):
        if self.read_mode in (u'local', u'file'):
            if self.position < len(self.lines) - 1:
                self.position += 1
                return self.lines[self.position]
        if self.read_mode == u'repl':
            return raw_input(u'> ')
        else:
            return None

    def copy(self):
        c = Environment(self.logger)
        c.var = {}
        c.var.update(self.var)
        c.session = self.session
        c.namespaces = self.namespaces
        c.lines = self.lines
        c.filename = self.filename
        c.read_mode = self.read_mode
        c.attached = self.attached
        if hasattr(self, u'args'):
            c.args = self.args
        return c

    def substitute(self, single, *args):
        sargs = []
        keys = [k for k in self.var.keys()
                if not k.startswith(u'_')]
        for arg in args:
            for key in keys:
                if arg == u'(%s)' % key:
                    arg = self.var[key]
                    break
            for key in keys:
                try:
                    arg = arg.replace(u'(%s)' % key,
                                      unicode(self.var[key]))
                except TypeError:
                    break
                except AttributeError:
                    break
            sargs.append(arg)
        if single:
            return sargs[0]
        else:
            return sargs

    def load(self, filename):
        self.read_mode = u'file'
        self.filename = filename
        with open(self.filename, u'r') as IF:
            self.lines = IF.readlines()

    def local(self, name, lines):
        self.read_mode = u'local'
        self.lines = lines
        self.filename = name

    def repl(self, filename=None):
        self.read_mode = u'repl'
        self.position = -1
        self.filename = self.filename or filename

    def run(self):
        self.mode = u'normal'
        self.data = None
        self.position = -1
        while True:
            line = self.line_iterator
            if line is None:
                break
            if self.terminate:
                break
            if self.mode == u'until':
                if line.startswith(self.data_terminator):
                    self.mode = u'normal'
                    line = line.replace(self.data_terminator, u'then')
                else:
                    self.data += line
                    continue

            if self.mode == u'block':
                if line.startswith(self.data_terminator):
                    self.mode = u'normal'
                else:
                    self.data.append(line.strip())

            if self.mode == u'normal':
                line = line.strip()
                if line.startswith(u'%%'):
                    self.log(line[2:], None, u'title')
                    continue
                if line.startswith(u'%'):
                    self.log(line[1:], None, u'comment')
                    continue
                if line == u'':
                    continue
                if self.step_through and not line.startswith(u'setlog'):
                    i = raw_input(u"> %s " % line)
                    if i == u'skip':
                        continue
                parts = line.split(u' -> ')
                self.must = False
                if len(parts) == 1:
                    self.command = line
                    self.target = None
                else:
                    self.command = parts[0].strip()
                    self.target = parts[1].strip()
                    if self.target.endswith(u'!'):
                        self.must = True
                        self.target = self.target[:-1]

                if self.command.startswith(u'('):
                    self.command = u'call %s' % self.command

                if self.command.startswith(u'until '):
                    self.data_terminator = self.command[6:].strip()
                    self.mode = u'until'
                    self.data = u''
                    continue

                if self.command.startswith(u'while '):
                    self.data_terminator = u'endwhile'
                    self.mode = u'block'
                    self.data = []
                    self.block_expression = self.command[6:].strip()
                    continue

                if self.command.startswith(u'if '):
                    self.data_terminator = u'endif'
                    self.mode = u'block'
                    self.data = []
                    self.block_expression = self.command[3:].strip()
                    continue

                if self.command == u'sub':
                    self.data_terminator = u'endsub'
                    self.mode = u'block'
                    self.data = []
                    self.block_expression = self.command[4:].strip()
                    continue

                elif self.command == u'then':
                    if self.target is not None:
                        self.var[self.target] = self.data
                else:
                    parts = self.command.split(u' ', 1)
                    command = parts.pop(0)
                    if len(parts) > 0:
                        argstring = parts.pop()
                        argstring = argstring.replace(u'\,', u'{{COMMA}}')
                        args = [a.strip().replace(u'{{COMMA}}', u',')
                                for a in argstring.split(u',')]
                    else:
                        args = []
                    args = self.substitute(False, *args)

                    try:
                        if command == u'connect':
                            result = self.connect(*args)
                        elif command == u'include':
                            result = self.include(*args)
                        elif command == u'help':
                            result = self.printhelp(*args)
                        elif command == u'env':
                            result = self.env(*args)
                        elif command == u'get':
                            result = self.get(*args)
                        elif command == u'xget':
                            result = self.get(*args)
                            result = self.xml(result)
                        elif command == u'put':
                            result = self.put(*args)
                        elif command == u'post':
                            result = self.post(*args)
                        elif command == u'delete':
                            result = self.delete(*args)
                        elif command == u'xml':
                            result = self.xml(*args)
                        elif command == u'xmod':
                            result = self.xmod(*args)
                        elif command == u'xattr':
                            result = self.xattr(*args)
                        elif command == u'xadd':
                            result = self.xadd(*args)
                        elif command == u'xdelete':
                            result = self.xdelete(*args)
                        elif command == u'raw':
                            result = self.raw(*args)
                        elif command == u'headers':
                            result = self.headers(*args)
                        elif command == u'xpath':
                            result = self.xpath(*args)
                        elif command == u'fopen':
                            result = self.fopen(*args)
                        elif command == u'fclose':
                            result = self.fclose(*args)
                        elif command == u'dict':
                            result = self.dict(*args)
                        elif command == u'argdict':
                            result = self.argdict(*args)
                        elif command == u'argpop':
                            result = self.argpop(*args)
                        elif command == u'template':
                            result = self.template(*args)
                        elif command == u'sleep':
                            result = self.sleep(*args)
                        elif command == u'log':
                            result = self.log(*args)
                        elif command == u'eval':
                            result = self.eval(*args)
                        elif command == u'fill':
                            result = self.substitute(True, *args)
                        elif command == u'value':
                            result = self.value(*args)
                        elif command == u'each':
                            result = self.each(*args)
                        elif command == u'append':
                            result = self.append(*args)
                        elif command == u'urilist':
                            result = self.urilist(*args)
                        elif command == u'list':
                            result = self.makelist(*args)
                        elif command == u'namespace':
                            result = self.namespace(*args)
                        elif command == u'endwhile':
                            result = self.endwhile(*args)
                        elif command == u'endif':
                            result = self.endif(*args)
                        elif command == u'endsub':
                            result = self.endsub(self.target, *args)
                        elif command == u'call':
                            result = self.callsub(*args)
                        elif command == u'return':
                            result = self.returnsub(*args)
                        elif command == u'external':
                            result = self.newclass(*args)
                        elif command == u'internal':
                            result = self.newlocalclass(*args)
                        elif command == u'use':
                            result = self.useclass(*args)
                        elif command == u'debug':
                            result = self.debug(*args)
                        elif command == u'every':
                            result = self.every(*args)
                        elif command == u'idle':
                            result = self.every()
                        elif command == u'attach':
                            result = self.attach(*args)
                        elif command == u'setlog':
                            result = self.setlog(*args)
                        elif command == u'is':
                            result = self.i_am(*args)
                        elif command == u'repl':
                            result = self.repl()
                        elif command == u'stomp' and _have_stomp:
                            result = self.stomp(*args)
                        elif command == u'exit':
                            break
                        else:
                            raise ValueError(u"Unknown command '%s'" % command)

                        if self.target is not None:
                            self.var[self.target] = result
                            if self.must and result in (None, False, []):
                                self.log(
                                    u"Exiting block, missing required data",
                                    {u'command': command,
                                     u'args': args,
                                     u'result': result}, u'error')
                                self.return_value = False
                                self.terminate = True
                    except Exception, e:
                        if self.read_mode == u'repl':
                            et, ev, etb = sys.exc_info()
                            tb = traceback.extract_tb(etb)
                            tbs = [u'%s +%i %s: %s' % x for x in tb]
                            self.log(unicode(e), u'\n'.join(tbs),
                                     u'error')
                        else:
                            raise e

    def connect(self, host, user, password):
        self.session = requests.Session()
        self.session.auth = (user, password)
        self.headers = {}
        self.log(u"System", u"host=%s, user=%s" % (host, user))

    def env(self, name, default=u''):
        if name == u'RESTHOST' and options.hostname is not None:
            return options.hostname
        if name == u'RESTUSER' and options.user is not None:
            return options.user.split(':')[0]
        if name == u'RESTPASS' and options.user is not None:
            return options.user.split(':')[1]
        if default == u'':
            if name == u'RESTUSER':
                default = 'user'
            elif name == u'RESTPASS':
                default = 'user'
        return os.getenv(name, default)

    def include(self, filename, args=u''):
        self.log(u"Include %s" % filename)
        if not filename.endswith(u'.rest'):
            filename = filename + u'.rest'
        if filename == self.filename:
            raise ValueError(u"Can't include self!")
        subenv = Environment(self.logger if u'log' in args else None)
        subenv.session = self.session
        subenv.namespaces = self.namespaces
        subenv.load(filename)
        subenv.run()
        self.var.update(subenv.var)
        self.session = subenv.session
        self.namespaces = subenv.namespaces

    def xml(self, response):
        try:
            return etree.fromstring(response.content)
        except AttributeError:
            return etree.fromstring(response.encode())

    def xmod(self, dom, xpath, new_value):
        if xpath == u'.':
            element = dom
        else:
            element = self.xpath(dom, xpath)
        if element is not None:
            element.text = new_value
            self.log(u"New value", new_value, u'pp')

    def xattr(self, dom, xpath, attr, new_value):
        element = self.xpath(dom, xpath)
        if element is not None:
            element.set(attr, new_value)
            self.log(u"New attribute value", u'%s = "%s"' %
                     (attr, new_value), u'pp')

    def xadd(self, dom, xpath, tag):
        element = self.xpath(dom, xpath)
        if element is not None:
            prefix, name = tag.split(u':', 1)
            return etree.SubElement(
                element,
                u'{%s}%s' % (self.namespaces.get(prefix), name))

    def raw(self, response):
        return response.content.decode()

    def xpath(self, dom, xpath, want1=True):
        if not hasattr(dom, u'xpath'):
            raise TypeError(u'%s is not an XML element' % unicode(dom))
        result = dom.xpath(xpath, namespaces=self.namespaces)
        if want1:
            try:
                result = result[0]
            except IndexError:
                if not result:
                    result = None
        self.log(u"Resolve xpath", (xpath, result), u'pp')
        return result

    def get(self, url, accept=None, headers={}):
        if accept is not None:
            headers = dict(headers)
            headers[u'accept'] = accept
        self.log(u"GET >>> " + unicode(url), headers, u'pp')
        response = self.session.get(url, headers=headers)
        self.log(u"GET <<< [%s]" % response.status_code,
                 dict(response.headers), u'pp')
        self.log(
            None,
            response.content.decode('utf-8'),
            u'xml' if u'xml' in response.headers.get(u'content-type', u'')
                else None)
        return response

    def put(self, url, data, content_type, headers={}):
        headers = dict(headers)
        headers[u'content-type'] = content_type
        self.log(u"PUT >>> " + unicode(url), headers, u'pp')
        try:
            data = etree.tostring(data)
        except AttributeError:
            pass
        except TypeError:
            pass
        self.log(None, data, u'xml')
        response = self.session.put(url, data=data, headers=headers)
        self.log(u"PUT <<< [%s]" % response.status_code,
                 dict(response.headers), u'pp')
        self.log(
            None,
            response.content.decode(),
            u'xml' if u'xml' in response.headers.get(u'content-type', u'')
            else None)
        return response

    def post(self, url, data, content_type, headers={}):
        headers = dict(headers)
        headers[u'content-type'] = content_type
        self.log(u"POST >>> " + unicode(url), headers, u'pp')
        try:
            data = etree.tostring(data)
        except AttributeError:
            pass
        except TypeError:
            pass
        self.log(None, data, u'xml')
        response = self.session.post(url, data=data, headers=headers)
        self.log(u"POST <<< [%s]" % response.status_code,
                 dict(response.headers), u'pp')
        self.log(
            None,
            response.content.decode(),
            u'xml' if u'xml' in response.headers.get(u'content-type', u'')
            else None)
        return response

    def delete(self, url, headers={}):
        headers = dict(headers)
        self.log(u"DELETE >>> " + url, headers, u'pp')
        response = self.session.delete(url, headers=headers)
        self.log(u"DELETE <<< [%s]" % response.status_code,
                 dict(response.headers), u'pp')
        self.log(
            None,
            response.content.decode(),
            u'xml' if u'xml' in response.headers.get(u'content-type', u'')
            else None)
        return response

    def fopen(self, filename, mode=u'r'):
        self.log(u"Open file", filename)
        return open(filename, mode)

    def fclose(self, f):
        f.close()

    def dict(self, *pairs):
        d = {}
        for key, value in [p.split(u'=') for p in pairs]:
            d[key] = self.substitute(True, value)
        return d

    def argdict(self):
        d = {}
        for key, value in [p.split(u'=') for p in self.sysargs]:
            d[key] = self.substitute(True, value)
        return d

    def argpop(self):
        return self.sysargs.pop(0)

    def template(self, template, subs):
        self.log(u'substituting', subs, u'pp')
        scheme, netloc, path, params, query, fragment = urlparse(template)
        qparams = parse_qsl(query)
        new_qparams = []
        for k, v in qparams:
            if v.startswith(u'{'):
                name = v.replace(u'{', u'').replace(u'}', u'').replace(u'?', u'')
                if name in subs:
                    new_qparams.append((k, subs[name]))
            else:
                new_qparams.append((k, v))
        url = urlunparse((scheme, netloc, path, params,
                          urlencode(new_qparams), fragment))
        self.log(u'resulting url', url)
        return url

    def sleep(self, t):
        time.sleep(float(t))

    def endwhile(self):
        subenv = Environment(self.logger)
        subenv.local(self.block_expression, self.data)
        subenv.var.update(
            dict((k, v) for k, v in self.var.items() if not k.startswith(u'_')))
        subenv.session = self.session
        subenv.namespaces = self.namespaces
        subenv.return_value = None
        counter = 0
        while eval(self.block_expression, subenv.var):
            subenv.run()
            counter += 1
        self.var.update(
            dict((k, v) for k, v in subenv.var.items()
             if not k.startswith(u'_') and k in self.var))
        self.return_value = subenv.return_value
        return counter

    def endif(self):
        subenv = Environment(self.logger)
        subenv.local(self.block_expression, self.data)
        subenv.var = self.var
        subenv.session = self.session
        subenv.namespaces = self.namespaces
        if eval(self.block_expression, self.var):
            subenv.run()
            self.terminate = subenv.terminate
            return True
        else:
            return False

    def endsub(self, target, *args):
        subenv = Environment(self.logger)
        subenv.local(self.target, self.data)
        subenv.args = args
        subenv.namespaces = self.namespaces
        subenv.session = self.session
        subenv.name = target
        subenv.is_sub = True
        return subenv

    def callsub(self, subenv, *args):
        if not hasattr(subenv, u'copy') or not hasattr(subenv, u'args'):
            raise TypeError(u"%s is not a sub routine" % unicode(subenv))
        subenv = subenv.copy()
        argd = {}
        for i, arg in enumerate(subenv.args):
            try:
                value = args[i]
            except IndexError:
                raise ValueError(u"Missing argument '%s'" % arg)

            argd[arg] = value
        subenv.var = dict(basevar)
        subenv.var.update(subenv.attached)
        subenv.var.update(argd)
        subenv.return_value = None
        subenv.run()
        return subenv.return_value

    def returnsub(self, value=None):
        self.terminate = True
        self.return_value = value
        return value

    def eval(self, expression):
        return eval(expression, self.var)

    def value(self, expression):
        return self.substitute(True, expression)

    def each(self, data, subenv, *args):
        returns = []
        for entry in data:
            returns.append(self.callsub(subenv, entry, *args))
        return returns

    def append(self, l, entry):
        l.append(entry)
        return len(l)

    def urilist(self, uris):
        return u'\n'.join(uris)

    def makelist(self, *items):
        return items

    def namespace(self, short, uri):
        self.namespaces[short] = uri

    def newclass(self, module_name, class_name, *args):
        module = importlib.import_module(module_name)
        Class = getattr(module, class_name)
        self.log(u"Constructing local %s" % (Class),
                 args, u'pp')
        return Class(*args)

    def newlocalclass(self, path, module_name, class_name, *args):
        raise Exception("Deprecated")
        #with open(path, 'r') as f:
        #    module = imp.load_module(module_name, f, os.path.basename(path))
        #Class = getattr(module, class_name)
        #return Class(*args)

    def useclass(self, inst, method, *args):
        self.log(u"Calling method %s on %s" %
                 (method, inst),
                 args, u'pp')
        return getattr(inst, method)(*args)

    def debug(self):
        self.log(u"Debug", dict((k, v) for k, v in self.var.items()
                           if not k.startswith(u'__')), u'pp')

    def every(self, interval=10, handler=None, *args):
        while True:
            self.sleep(interval)
            if handler is not None:
                self.callsub(handler, *args)

    def attach(self, sub, on):
        self.log(u"Attaching", sub.name + u" on " + on.name)
        on.attached[sub.name] = sub

    def setlog(self, *args):
        if self.logger is None:
            return
        for arg in args:
            if arg == u'mute':
                self.logger.mute = True
            elif arg == u'unmute':
                self.logger.mute = False
            elif arg.startswith(u'+'):
                arg = arg[1:]
                if arg in self.logger.smute:
                    self.logger.smute.remove(arg)
            elif arg.startswith(u'-'):
                arg = arg[1:]
                if arg not in self.logger.smute:
                    self.logger.smute.append(arg)

    def i_am(self, what):
        if what == u'graphical':
            if self.logger is not None:
                return self.logger.graphical
        return False

    def printhelp(self):
        self.log("Help", "Please see https://github.com/eblade/restnote/blob/master/README.md")

    def stomp(self, user, password, stomp_link, handler):
        s = StompListener(self.logger, user, password, stomp_link, handler)
        return s
        

if options.html is not None:
    logger = HTML(options.html)
elif options.output_format == u'terminal':
    logger = Terminal()
else:
    logger = None

environment = Environment(logger)
environment.sysargs = args
environment.load(input_filename)
environment.step_through = options.step_through

try:
    environment.run()
finally:
    if logger is not None:
        logger.close()
